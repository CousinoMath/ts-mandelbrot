{"version":3,"sources":["mandelbrotWorker.ts"],"names":[],"mappings":"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","file":"mandelbrotWorker.8aeddb4c.map","sourceRoot":"..\\src","sourcesContent":["onmessage = (evt: MessageEvent) => {\r\n  const points = evt.data[0] as [Float32Array, Float32Array];\r\n  const [maxIters, escapeR] = evt.data[1] as [number, number];\r\n  const imgData = evt.data[2] as ImageData;\r\n  const newImgData = mandelbrot(points, maxIters, escapeR, imgData);\r\n  (postMessage as any)([newImgData]);\r\n};\r\n\r\nfunction mandelbrot(\r\n  points: [Float32Array, Float32Array],\r\n  maxIters: number,\r\n  escapeR: number,\r\n  imgData: ImageData\r\n): ImageData {\r\n  const [reals, imags] = points;\r\n  const numPoints = reals.length;\r\n  const iterations = new Float32Array(numPoints);\r\n  let iterHistogram = new Array<number>(maxIters);\r\n  const rSqr = escapeR * escapeR;\r\n  const logR = Math.log(escapeR);\r\n\r\n  iterHistogram.fill(0);\r\n  for (let pntIdx = 0; pntIdx < numPoints; pntIdx++) {\r\n    const [creal, cimag] = [reals[pntIdx], imags[pntIdx]];\r\n    let [zreal, zimag] = [creal, cimag];\r\n    let iter = 1;\r\n    while (iter < maxIters && zreal * zreal + zimag * zimag < rSqr) {\r\n      [zreal, zimag] = [\r\n        zreal * zreal - zimag * zimag + creal,\r\n        2 * zreal * zimag + cimag\r\n      ];\r\n      iter++;\r\n    }\r\n    const modulus = Math.sqrt(zreal * zreal + zimag * zimag);\r\n    if (iter < maxIters) {\r\n      const nu = Math.log2(Math.log(modulus) / logR);\r\n      iterations[pntIdx] = iter + 1 - nu;\r\n    } else {\r\n      iterations[pntIdx] = maxIters;\r\n    }\r\n    iterHistogram[iter - 1]++;\r\n  }\r\n  let sum = 0;\r\n  for (let iterIdx = 0; iterIdx < maxIters; iterIdx++) {\r\n    sum += iterHistogram[iterIdx];\r\n    iterHistogram[iterIdx] = sum;\r\n  }\r\n  iterHistogram = iterHistogram.map(x => x / sum);\r\n  for (let pntIdx = 0; pntIdx < numPoints; pntIdx++) {\r\n    const iter = iterations[pntIdx];\r\n    let color = { red: 0, green: 0, blue: 0 };\r\n    if (iter < maxIters) {\r\n      const histIdx = Math.floor(iter);\r\n      const color1 = assignColor(iterHistogram[histIdx]);\r\n      const color2 = assignColor(iterHistogram[histIdx + 1]);\r\n      color = linearInterpolate(color1, color2, iter % 1);\r\n    }\r\n    const imgIdx = 4 * pntIdx;\r\n    imgData.data[imgIdx] = Math.floor(color.red);\r\n    imgData.data[imgIdx + 1] = Math.floor(color.green);\r\n    imgData.data[imgIdx + 2] = Math.floor(color.blue);\r\n    imgData.data[imgIdx + 3] = 255;\r\n  }\r\n  return imgData;\r\n}\r\n\r\nfunction assignColor(c: number): { red: number; green: number; blue: number } {\r\n  if (2 * c < 1) {\r\n    return HSVtoRGB(240, 1, 1);\r\n  } else if (3 * c < 2) {\r\n    // 1/2 <= c < 2/3\r\n    // 0 <= 2 c - 1 < 1/3\r\n    // 0 <= 180 (2 c - 1) < 60\r\n    // 180 < 240 - 180 (2 c - 1) = 420 - 360 c <= 240\r\n    return HSVtoRGB(Math.round(420 - 360 * c), 1, 1);\r\n  } else if (4 * c < 3) {\r\n    // 2/3 <= c < 3/4\r\n    // 0 <= 3 c - 2 < 1/4\r\n    // 0 <= 240 (3 c - 2) < 60\r\n    // 120 < 180 - 240 (3 c - 2) = 660 - 720 c <= 180\r\n    return HSVtoRGB(Math.round(660 - 720 * c), 1, 1);\r\n  } else if (5 * c < 4) {\r\n    // 3/4 <= c < 4/5\r\n    // 0 <= 4 c - 3 < 1/5\r\n    // 0 <= 300 (4 c - 3) < 60\r\n    // 60 < 120 - 300 (4 c - 3) = 1020 - 1200 c <= 120\r\n    return HSVtoRGB(Math.round(1020 - 1200 * c), 1, 1);\r\n  } else if (6 * c < 5) {\r\n    // 4/5 <= c < 5/6\r\n    // 0 <= 5 c - 4 < 1/6\r\n    // 0 <= 360 (5 c - 4) < 60\r\n    // 0 < 60 - 360 (5 c - 4) = 1500 - 1800 c <= 60\r\n    return HSVtoRGB(Math.round(1500 - 1800 * c), 1, 1);\r\n  } else {\r\n    // 5/6 <= c <= 1\r\n    // 0 <= 6 c - 5 <= 1\r\n    // 0 <= 60 (6 c - 5) <= 60\r\n    // 300 <= 360 - 60 (6 c - 5) = 660 - 360 c <= 360\r\n    return HSVtoRGB(Math.round(660 - 360 * c), 1, 1);\r\n  }\r\n}\r\n\r\nfunction HSVtoRGB(\r\n  h: number,\r\n  s: number,\r\n  v: number\r\n): { red: number; green: number; blue: number } {\r\n  const c = v * s;\r\n  const x = c * (1 - Math.abs(((h / 60) % 2) - 1));\r\n  const m = v - c;\r\n  let r = 0;\r\n  let g = 0;\r\n  let b = 0;\r\n  if (0 <= h && h < 60) {\r\n    r = c;\r\n    g = x;\r\n  } else if (60 <= h && h < 120) {\r\n    r = x;\r\n    g = c;\r\n  } else if (120 <= h && h < 180) {\r\n    g = c;\r\n    b = x;\r\n  } else if (180 <= h && h < 240) {\r\n    g = x;\r\n    b = c;\r\n  } else if (240 <= h && h < 300) {\r\n    b = c;\r\n    r = x;\r\n  } else if (300 <= h && h < 360) {\r\n    b = x;\r\n    r = c;\r\n  }\r\n  return {\r\n    blue: Math.floor((b + m) * 255),\r\n    green: Math.floor((g + m) * 255),\r\n    red: Math.floor((r + m) * 255)\r\n  };\r\n}\r\n\r\nfunction linearInterpolate<T>(\r\n  x: { [K in keyof T]: number },\r\n  y: { [K in keyof T]: number },\r\n  alpha: number\r\n): { [K in keyof T]: number } {\r\n  const z = x;\r\n  for (const key in y) {\r\n    if (y.hasOwnProperty(key)) {\r\n      z[key] = (1 - alpha) * z[key] + alpha * y[key];\r\n    }\r\n  }\r\n  return z;\r\n}\r\n"]}